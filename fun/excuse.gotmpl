{{/* 
    This custom command composes an excuse Ã  la BOFH (Bastard Operator From Hell)
    They might not be correct terminology but satisfy most users  : )

    Recommended trigger and trigger type: Command trigger with `Excuse` trigger

    Usage:  -excuse [Amount]

    Idea by mrbentarikau

    Author: Luca Z. <https://github.com/l-zeuch>
    License: APGL-3.0
    Copyright: (c) 2021
*/}}

{{$firstSlice := cslice "Temporary" "Intermittant" "Partial" "Redundant" "Total" "Multiplexed" "Inherent" "Duplicated" "Dual-Homed" "Synchronous" "Bidirectional" 
                    "Serial" "Asynchronous" "Multiple" "Replicated" "Non-Replicated" "Unregistered" "Non-Specific" "Generic" "Migrated" "Localised" "Resignalled"
                    "Dereferenced" "Nullified" "Aborted" "Serious" "Minor" "Major" "Extraneous" "Illegal" "Insufficient" "Viral" "Unsupported" "Outmoded" "Legacy"
                    "Permanent" "Invalid" "Deprecated" "Virtual" "Unreportable" "Undetermined" "Undiagnosable" "Unfiltered" "Static" "Dynamic" "Delayed" "Immediate"
                    "Nonfatal" "Fatal" "Non-Valid" "Unvalidated" "Non-Static" "Unreplicable" "Non-Serious"}}
{{$secondSlice := cslice "Array" "Systems" "Hardware" "Software" "Firmware" "Backplane" "Logic-Subsystem" "Integrity" "Subsystem" "Memory" "Comms" "Checksum" "Protocol"
                    "Parity" "Bus" "Timing" "Synchronisation" "Topology" "Transmission" "Reception" "Stack" "Framing" "Code" "Programming" "Peripheral" "Environmental"
                    "Loading" "Operation" "Parameter" "Syntax" "Initialisation" "Execution" "Resource" "Encryption" "Decryption" "File" "Precondition" "Authentication"
                    "Paging" "Swapfile" "Service" "Gateway" "Request" "Proxy" "Media" "Registry" "Configuration" "Metadata" "Streaming" "Retrieval" 
                    "Installation" "Library" "Handler"}}
{{$thirdSlice := cslice "Interruption" "Destabilisation" "Desynchronisation" "Failure" "Dereferencing" "Overflow" "Underflow" "NMI" "Interrupt" "Corruption" "Anomaly" "Seizure"
                    "Override" "Reclock" "Rejection" "Invalidation" "Halt" "Exhaustion" "Infection" "Incompability" "Timeout" "Expiry" "Unavailability" "Bug" "Condition" "Crash"
                    "Dump" "Crashdump" "Stackdump" "Problem" "Lockout"}}
{{$fourthSlice := cslice "Error" "Problem" "Warning" "Signal" "Flag"}}

{{$args := parseArgs 0 "" (carg "int" "Amount")}}

{{$out := "You should never see this error."}}
{{$title := "Your super nifty excuse:"}}
{{if $args.IsSet 0}}
    {{$title = "Your super nifty excuses:"}}
    {{$amnt := $args.Get 0}}
    {{if or (lt $amnt 2) (gt $amnt 10)}}
        {{$out = "Amount is too small/large! (min 2, max 10)"}}
    {{else}}
        {{if eq (randInt 3) 2}}
            {{$out = (printf "%02d. %s %s %s %s" 1 (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice))) (index $fourthSlice (randInt (len $fourthSlice))))}}
        {{else}}
            {{$out = (printf "%02d. %s %s %s" 1 (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice))))}}
        {{end}}
        {{range seq 0 (add $amnt -1)}}
            {{if eq (randInt 3) 2}}
                {{- $out = (printf "%s\n%02d. %s %s %s %s" $out (add . 2) (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice))) (index $fourthSlice (randInt (len $fourthSlice)))) -}}
            {{else}}
                {{- $out = (printf "%s\n%02d. %s %s %s" $out (add . 2) (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice)))) -}}
            {{end}}
        {{end}}
    {{end}}
{{else}}
    {{if eq (randInt 3) 2}}
        {{$out = (printf "%02d. %s %s %s %s" 1 (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice))) (index $fourthSlice (randInt (len $fourthSlice))))}}
    {{else}}
        {{$out = (printf "%02d. %s %s %s" 1 (index $firstSlice (randInt (len $firstSlice))) (index $secondSlice (randInt (len $secondSlice))) (index $thirdSlice (randInt (len $thirdSlice))))}}
    {{end}}
{{end}}
{{$col := randInt 16777216}}
{{$embed := cembed "author" (sdict "name" $title) "description" $out "footer" (sdict "text" (printf "Requested by: %s" .User.String) "icon_url" (.User.AvatarURL "512")) "color" $col}}
{{sendMessage nil $embed}}