{{/*
	This custom command adds staff note functionality to your server.
	Please view the README for more details.

	Copyright (c): Luca Z. <https://github.com/l-zeuch>, 2021
	Source: https://github.com/l-zeuch/lagpdb-cc
	Licensed under the terms of BSD-3-Clause
*/}}

{{/* CONFIGURATION START */}}
{{$NUKE_PERMISSION := "ManageServer"}}
{{$BASE_PERMISSION := "ManageMessages"}}
{{$DELETE_TIMEOUT := toDuration "2m"}}
{{$PASSWD_CHARSET := toRune "AaBbCcDdEeFfGgHhIiJjKkLiMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789@€<>(){}[]!$%&?"}}
{{/* CONFIGURATION END */}}

{{/* ACTUAL CODE, DO NOT TOUCH */}}


{{if not .ExecData}}
{{$a:=""}}
{{$b:=userArg nil}}
{{$c:=""}}

{{if ge (len .CmdArgs) 1}}
{{$a =index .CmdArgs 0}}
{{end}}

{{if ge (len .CmdArgs) 2}}
{{$b =(getMember (index .CmdArgs 1))}}
{{end}}

{{if ge (len .CmdArgs) 3}}
{{$c =joinStr " " (slice .CmdArgs 2)}}
{{$c =reReplace `\n|\r|\r\n` $c " "}}
{{end}}

{{$d:=cslice "help" "set" "get" "del" "delall" "nuke"}}
{{$e:=joinStr "`, `" $d.StringSlice}}

{{$f:=index (reFindAllSubmatches `.*?: \x60(.*)\x60\z` (execAdmin "prefix")) 0 1}}

{{$g:=""}}
{{$h:=sdict}}

{{$i:=cembed "title" "Notes Help Page" "fields" (cslice (sdict "name" "• Basic Usage" "value" (printf "Valid subcommands are:`%s`.\nIf none are given, this page is shown instead.```%snote <subcommand> (Arguments)```" $e $f)) (sdict "name" "• Help" "value" (printf "Shows this text!```%snote help```" $f)) (sdict "name" "• Set" "value" (printf "Sets a note on a user with optional duration provided by `-duration` flag.```%snote set <User:Mention/ID> <Note:Text>```" $f)) (sdict "name" "• Get" "value" (printf "Gets all notes of a user.```%snote get <User:Mention/ID>```" $f)) (sdict "name" "• Del" "value" (printf "Deletes a given note of given user.```%snote del <User:Mention/ID> <NoteID:Whole Number>```The note ID can be obtained by running the `get` subcommand. The deleted note will be shown, in case you accidentally deleted the wrong one." $f)) (sdict "name" "• Delall" "value" (printf "Deletes all notes of the given user.\n:warning: **This action is irreversible.** :warning:```%snote delall <User:Mention/ID>```" $f)) (sdict "name" "• Nuke" "value" (printf "Deletes all notes server-wide. Useful when you wish to remove this system, or want to clean it up.\n:warning: **This action is irreversible. Don't run it \"to test\". It will work.** :warning:```%snote nuke```" $f)) ) "footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024"))}}

{{$j:=(in (split (index (split (exec "viewperms") "\n") 2) ", ") $BASE_PERMISSION)}}
{{$k:=1}}
{{$l:=currentTime.Format "Mon 02 Jan 15:04"}}
{{if and (inFold (exec "cc" .CCID) "\n\tCopyright (c): Luca Z. <https://github.com/l-zeuch>, 2021") $j}}
{{if or (inFold "help" $a) (not $a)}}
{{sendMessage nil $i}}
{{else}}
{{if or $b (inFold "nuke" $a)}}
{{if not (inFold "nuke" $a)}}
{{$b =$b.User}}
{{$h =sdict "footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024")) "thumbnail" (sdict "url" ($b.AvatarURL "1024")) "color" 0x00ff00}}
{{end}}
{{if inFold "set" $a}}
{{if le (len $c) 500}}
{{$m:=dbGet $b.ID "notes"}}
{{if $m}}
{{$n:=split $m.Value "\n"}}
{{$o:=reFind `\A\d+\b` (index $n (sub (len $n) 1))|toInt}}
{{$k =add $o 1}}
{{if ge (len $n) 10}}
{{$g =printf "This user currently has too many notes. Delete at least one to store a new one.\nI've remembered what you wanted to save:```%s```" $c}}
{{end}}
{{end}}
{{dbSet $b.ID "notes" (printf "%s\n%d %s: %s" (or $m.Value "") $k $l $c)}}
{{if not $g}}
{{$h.Set "title" (printf "Successfully set a new note for %s" $b)}}
{{$h.Set "fields" (cslice (sdict "name" "• User:" "value" (printf "`%s` (ID `%d`)" $b $b.ID)) (sdict "name" "• Note:" "value" (printf "ID: `%d`\nText: %s" $k $c)))}}
{{end}}
{{else}}
{{$g =printf "This note is too long (max 500 characters). Please try to shorten it, this is not a writing club.```%s```" $c}}
{{end}}
{{else if inFold "get" $a}}
{{$p:=(dbGet $b.ID "notes").Value}}
{{$h.Set "title" (printf "Notes for %s (ID %d)" $b $b.ID)}}
{{$h.Set "description" "None recorded."}}
{{if $p}}
{{$h.Set "description" $p}}
{{if gt (len $p) 4000}}
{{$h.Set "description" (slice $p 0 4000)}}
{{$h.Set "fields" (cslice (sdict "name" "Continued..." "value" (slice $p 4000)))}}
{{end}}
{{end}}
{{else if inFold "del" $a}}
{{if eq (len .CmdArgs) 3}}
{{$k =index .CmdArgs 2|toInt}}
{{$m:=split (dbGet $b.ID "notes").Value "\n"}}
{{$q:=""}}
{{$r:=""}}
{{range $m}}
{{- if not (reFind (printf `\A%d\b` $k) .)}}
{{- $q =(printf "%s\n%s" $q .)}}
{{- else}}
{{- $r =slice (toString .) 19}}
{{- end -}}
{{end}}
{{dbSet $b.ID "notes" $q}}
{{$h.Set "title" (printf "Successfully delete a note for %s" $b)}}
{{$h.Set "description" (printf "Deleted note:```%s```" $r)}}
{{else}}
{{$g ="No matching combo found / invalid argument count.```-note del <User:Mention/ID> <NoteID:Whole Number>```"}}
{{end}}
{{else if inFold "delall" $a}}
{{if eq (len .CmdArgs) 2}}
{{$s:=""}}
{{range seq 0 12}}
{{- $s =printf "%s%c" $s (index $PASSWD_CHARSET (randInt (len $PASSWD_CHARSET))) -}}
{{end}}
{{$h.Set "color" 0xffff00}}
{{$h.Set "title" "Warning!"}}
{{$h.Set "description" "You are about to delete **all** notes on that user. Did you perhaps meant to use `note del`?"}}
{{$h.Set "fields" (cslice (sdict "name" "OK. I'm aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\n```%snote delall %d %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $f $b.ID $s)) (sdict "name" "I'd like to think about it." "value" "That is also OK. Just let it expire.") )}}
{{dbSetExpire .User.ID (printf "notes_delall_%d" $b.ID) $s (toInt $DELETE_TIMEOUT.Seconds)}}
{{else}}
{{if $s:=(dbGet .User.ID (printf "notes_delall_%d" $b.ID)).Value}}
{{if eq (index .CmdArgs 2) $s}}
{{dbDel .User.ID (printf "notes_delall_%d" $b.ID)}}
{{dbDel $b.ID "notes"}}
{{$h.Set "title" (printf "Successfully deleted all notes for %s!" $b)}}
{{$h.Set "description" (printf "I've deleted all notes on this user:\n%s (ID %d)" $b $b.ID)}}
{{else}}
{{$g ="Wrong password. Run the `delall` command again to generate a new one."}}
{{dbDel .User.ID (printf "notes_delall_%d" $b.ID)}}
{{end}}
{{end}}
{{end}}
{{else if inFold "nuke" $a}}
{{if $j =(in (split (index (split (exec "viewperms") "\n") 2) ", ") $NUKE_PERMISSION)}}
{{if eq (len .CmdArgs) 1}}
{{$s:=""}}
{{$t:=len $PASSWD_CHARSET}}
{{range seq 0 12}}
{{- $s =printf "%s%c" $s (index $PASSWD_CHARSET (randInt $t)) -}}
{{end}}
{{$h.Set "color" 0xffff00}}
{{$h.Set "title" "Warning!"}}
{{$h.Set "description" "You are about to delete **all** notes on the server. Are you sure you want to do this? There is no going back."}}
{{$h.Set "fields" (cslice (sdict "name" "OK. I'm aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\n```%snote nuke %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $f $s)) (sdict "name" "I'd like to think about it." "value" "That is also OK. Just let it expire.") )}}
{{dbSetExpire .User.ID "notes_nuke" $s (toInt $DELETE_TIMEOUT.Seconds)}}
{{else}}
{{if $s:=(dbGet .User.ID "notes_nuke").Value}}
{{if eq (index .CmdArgs 1) $s}}
{{dbDel .User.ID "notes_nuke"}}
{{$h.Set "title" "Started purging entire system."}}
{{$h.Set "description" "I will notify you when I'm done."}}
{{execCC .CCID nil 10 "exec"}}
{{end}}
{{else}}
{{$g ="Wrong password. Run the `nuke` command again to generate a new one."}}
{{end}}
{{end}}
{{else}}
{{$g =printf "You need %s permission, you don't have them. You may however run other subcommands." $NUKE_PERMISSION}}
{{end}}
{{else}}
{{$g =printf "`%s` is not a valid subcommand!\nValid subcommands are: `%s`.\nRun `%snotes help` for more information." $a $e $f}}
{{end}}
{{else}}
{{$g ="Member not found."}}
{{end}}
{{end}}
{{else if not $j}}
{{$g =printf "You need `%s` permission, you don't have them." $BASE_PERMISSION}}
{{else}}
{{addReactions "a:loading:833420211075940422"}}
{{end}}

{{if $g}}
{{$g =cembed "description" $g "author" (sdict "name" "An Error Occurred:") "color" 0xff0000 "footer" (sdict "text" (printf "Triggered by: %s" .User) "icon_url" (.User.AvatarURL "1024"))}}
{{sendMessage nil $g}}
{{end}}
{{if and $h (not $g)}}
{{sendMessage nil (cembed $h)}}
{{end}}

{{else}}
{{$u:=dbCount "notes"}}
{{if gt $u 0}}
{{if ge $u 100}}
{{$v:=dbDelMultiple (sdict "pattern" "notes") 100 0}}
{{execCC .CCID nil 10 "exec"}}
{{else}}
{{$v:=dbDelMultiple (sdict "pattern" "notes") $u 0}}
{{execCC .CCID nil 10 "exec"}}
{{end}}
{{else}}
{{sendMessage nil (cembed "title" "Successfully purged entire system.")}}
{{end}}
{{end}}
