{{/*
	This custom command adds staff note functionality to your server.
	Please view the README for more details.

	Copyright (c): Luca Z. <https://github.com/l-zeuch>, 2021
	Source: https://github.com/l-zeuch/lagpdb-cc
	Licensed under the terms of BSD-3-Clause
*/}}
{{/* CONFIGURATION START */}}
{{$BASE_PERMISSION:="ManageServer"}}
{{$NUKE_PERMISSION:="ManageMessages"}}
{{$DELETE_TIMEOUT:=toDuration "2m"}}
{{$PASSWD_CHARSET:=toRune "AaBbCcDdEeFfGgHhIiJjKkLiMmNnOoPpQqRrSsTtUuVvWwXxYyZz0123456789@€<>(){}[]!$%&?"}}
{{/* CONFIGURATION END */}}

{{if not .ExecData}}{{$j:=""}}{{$o:=userArg nil}}{{$v:=""}}{{if ge (len .CmdArgs) 1}}{{$j =index .CmdArgs 0}}{{end}}{{if ge (len .CmdArgs) 2}}{{$o =(getMember (index .CmdArgs 1))}}{{end}}{{if ge (len .CmdArgs) 3}}{{$v =joinStr " " (slice .CmdArgs 2)}}{{$v =reReplace `\n|\r|\r\n` $v " "}}{{end}}{{$b:=cslice "help" "set" "get" "del" "delall" "nuke"}}{{$a:=joinStr "`, `" $b.StringSlice}}{{$p:=index (reFindAllSubmatches `.*?: \x60(.*)\x60\z` (execAdmin "prefix")) 0 1}}{{$x:=""}}{{$y:=sdict}}{{$g:=cembed "title" "Notes Help Page"
"fields" (cslice
(sdict "name" "• Basic Usage" "value" (printf "Valid subcommands are:`%s`.\nIf none are given, this page is shown instead.```%snote <subcommand> (Arguments)```" $a $p))
(sdict "name" "• Help" "value" (printf "Shows this text!```%snote help```" $p))
(sdict "name" "• Set" "value" (printf "Sets a note on a user with optional duration provided by `-duration` flag.```%snote set <User:Mention/ID> <Note:Text>```" $p))
(sdict "name" "• Get" "value" (printf "Gets all notes of a user.```%snote get <User:Mention/ID>```" $p))
(sdict "name" "• Del" "value" (printf "Deletes a given note of given user.```%snote del <User:Mention/ID> <NoteID:Whole Number>```The note ID can be obtained by running the `get` subcommand. The deleted note will be shown, in case you accidentally deleted the wrong one." $p))
(sdict "name" "• Delall" "value" (printf "Deletes all notes of the given user.\n:warning: **This action is irreversible.** :warning:```%snote delall <User:Mention/ID>```" $p))
(sdict "name" "• Nuke" "value" (printf "Deletes all notes server-wide. Useful when you wish to remove this system, or want to clean it up.\n:warning: **This action is irreversible. Don't run it \"to test\". It will work.** :warning:```%snote nuke```" $p))
)
"footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024"))}}{{$k:=(in (split (index (split (exec "viewperms") "\n") 2) ", ") $NUKE_PERMISSION)}}{{$m:=1}}{{$i:=currentTime.Format "Mon 02 Jan 15:04"}}{{if and (inFold (exec "cc" .CCID) "\n\tCopyright (c): Luca Z. <https://github.com/l-zeuch>, 2021") $k}}{{if or (inFold "help" $j) (not $j)}}{{sendMessage nil $g}}{{else}}{{if or $o (inFold "nuke" $j)}}{{if not (inFold "nuke" $j)}}{{$o =$o.User}}{{$y =sdict "footer" (sdict "text" (printf "Triggered by %s" .User) "icon_url" (.User.AvatarURL "1024")) "thumbnail" (sdict "url" ($o.AvatarURL "1024")) "color" 0x00ff00}}{{end}}{{if inFold "set" $j}}{{if le (len $v) 500}}{{$q:=dbGet $o.ID "notes"}}{{if $q}}{{$h:=split $q.Value "\n"}}{{$n:=reFind `\A\d+\b` (index $h (sub (len $h) 1))|toInt}}{{$m =add $n 1}}{{if ge (len $h) 10}}{{$x =printf "This user currently has too many notes. Delete at least one to store a new one.\nI've remembered what you wanted to save:```%s```" $v}}{{end}}{{end}}{{dbSet $o.ID "notes" (printf "%s\n%d %s: %s" (or $q.Value "") $m $i $v)}}{{if not $x}}{{$y.Set "title" (printf "Successfully set a new note for %s" $o)}}{{$y.Set "fields" (cslice
(sdict "name" "• User:" "value" (printf "`%s` (ID `%d`)" $o $o.ID))
(sdict "name" "• Note:" "value" (printf "ID: `%d`\nText: %s" $m $v)))}}{{end}}{{else}}{{$x =printf "This note is too long (max 500 characters). Please try to shorten it, this is not a writing club.```%s```" $v}}{{end}}{{else if inFold "get" $j}}{{$t:=(dbGet $o.ID "notes").Value}}{{$y.Set "title" (printf "Notes for %s (ID %d)" $o $o.ID)}}{{if lt (len $t) 4000}}{{$y.Set "description" (or $t "None recorded.")}}{{else}}{{$y.Set "description" (slice $t 0 4000)}}{{$y.Set "fields" (cslice (sdict "name" "Continued..." "value" (slice $t 4000)))}}{{end}}{{else if inFold "del" $j}}{{if eq (len .CmdArgs) 3}}{{$m =index .CmdArgs 2|toInt}}{{$q:=split (dbGet $o.ID "notes").Value "\n"}}{{$r:=""}}{{$l:=""}}{{range $q}}{{if not (reFind (printf `\A%d;\b` $m) .)}}{{$r =(printf "%s\n%s" $r .)}}{{else}}{{$l =slice (toString .) 19}}{{end}}{{end}}{{dbSet $o.ID "notes" $r}}{{$y.Set "title" (printf "Successfully delete a note for %s" $o)}}{{$y.Set "description" (printf "Deleted note:```%s```" $l)}}{{else}}{{$x ="No matching combo found / invalid argument count.```-note del <User:Mention/ID> <NoteID:Whole Number>```"}}{{end}}{{else if inFold "delall" $j}}{{if eq (len .CmdArgs) 2}}{{$s:=""}}{{range seq 0 12}}{{$s =printf "%s%c" $s (index $PASSWD_CHARSET (randInt (len $PASSWD_CHARSET)))}}{{end}}{{$y.Set "color" 0xffff00}}{{$y.Set "title" "Warning!"}}{{$y.Set "description" "You are about to delete **all** notes on that user. Did you perhaps meant to use `note del`?"}}{{$y.Set "fields" (cslice
(sdict "name" "OK. I'm aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\n```%snote delall %d %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $p $o.ID $s))
(sdict "name" "I'd like to think about it." "value" "That is also OK. Just let it expire.")
)}}{{dbSetExpire .User.ID (printf "notes_delall_%d" $o.ID) $s (toInt $DELETE_TIMEOUT.Seconds)}}{{else}}{{if $s:=(dbGet .User.ID (printf "notes_delall_%d" $o.ID)).Value}}{{if eq (index .CmdArgs 2) $s}}{{dbDel .User.ID (printf "notes_delall_%d" $o.ID)}}{{dbDel $o.ID "notes"}}{{$y.Set "title" (printf "Successfully deleted all notes for %s!" $o)}}{{$y.Set "description" (printf "I've deleted all notes on this user:\n%s (ID %d)" $o $o.ID)}}{{else}}{{$x ="Wrong password. Run the `delall` command again to generate a new one."}}{{dbDel .User.ID (printf "notes_delall_%d" $o.ID)}}{{end}}{{end}}{{end}}{{else if inFold "nuke" $j}}{{if $k =(in (split (index (split (exec "viewperms") "\n") 2) ", ") $BASE_PERMISSION)}}{{if eq (len .CmdArgs) 1}}{{$s:=""}}{{$z:=len $PASSWD_CHARSET}}{{range seq 0 12}}{{$s =printf "%s%c" $s (index $PASSWD_CHARSET (randInt $z))}}{{end}}{{$y.Set "color" 0xffff00}}{{$y.Set "title" "Warning!"}}{{$y.Set "description" "You are about to delete **all** notes on the server. Are you sure you want to do this? There is no going back."}}{{$y.Set "fields" (cslice
(sdict "name" "OK. I'm aware and take responsibility." "value" (printf "Good. Run the following command **within the next %s** to confirm your choice.\n```%snote nuke %s```" (humanizeDurationSeconds $DELETE_TIMEOUT) $p $s))
(sdict "name" "I'd like to think about it." "value" "That is also OK. Just let it expire.")
)}}{{dbSetExpire .User.ID "notes_nuke" $s (toInt $DELETE_TIMEOUT.Seconds)}}{{else}}{{if $s:=(dbGet .User.ID "notes_nuke").Value}}{{if eq (index .CmdArgs 1) $s}}{{dbDel .User.ID "notes_nuke"}}{{$y.Set "title" "Started purging entire system."}}{{$y.Set "description" "I will notify you when I'm done."}}{{execCC .CCID nil 10 "exec"}}{{end}}{{else}}{{$x ="Wrong password. Run the `nuke` command again to generate a new one."}}{{end}}{{end}}{{else}}{{$x =printf "You need %s permission, you don't have them. You may however run other subcommands." $BASE_PERMISSION}}{{end}}{{else}}{{$x =printf "`%s` is not a valid subcommand!\nValid subcommands are: `%s`.\nRun `%snotes help` for more information." $j $a $p}}{{end}}{{else}}{{$x ="Member not found."}}{{end}}{{end}}{{else if not $k}}{{$x =printf "You need `%s` permission, you don't have them." $NUKE_PERMISSION}}{{else}}{{addReactions "a:loading:833420211075940422"}}{{end}}{{if $x}}{{$x =cembed "description" $x "author" (sdict "name" "An Error Occurred:") "color" 0xff0000
"footer" (sdict "text" (printf "Triggered by: %s" .User) "icon_url" (.User.AvatarURL "1024"))}}{{sendMessage nil $x}}{{end}}{{if and $y (not $x)}}{{sendMessage nil (cembed $y)}}{{end}}{{else}}{{$u:=dbCount "notes"}}{{if gt $u 0}}{{if ge $u 100}}{{$w:=dbDelMultiple (sdict "pattern" "notes") 100 0}}{{execCC .CCID nil 10 "exec"}}{{else}}{{$w:=dbDelMultiple (sdict "pattern" "notes") $u 0}}{{execCC .CCID nil 10 "exec"}}{{end}}{{else}}{{sendMessage nil (cembed "title" "Successfully purged entire system.")}}{{end}}{{end}}
